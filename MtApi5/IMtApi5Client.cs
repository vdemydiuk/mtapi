// ReSharper disable InconsistentNaming
using System;
using System.Collections.Generic;

namespace MtApi5
{
    public interface IMtApi5Client
    {
        Mt5ConnectionState ConnectionState { get; }
        int ExecutorHandle { get; set; }

        event EventHandler<Mt5ConnectionEventArgs> ConnectionStateChanged;
        event EventHandler<Mt5BookEventArgs> OnBookEvent;
        event EventHandler<Mt5TimeBarArgs> OnLastTimeBar;
        event EventHandler<Mt5LockTicksEventArgs> OnLockTicks;
        event EventHandler<Mt5TradeTransactionEventArgs> OnTradeTransaction;
        event EventHandler<Mt5QuoteEventArgs> QuoteAdded;
        event EventHandler<Mt5QuoteEventArgs> QuoteRemoved;
        event EventHandler<Mt5QuoteEventArgs> QuoteUpdate;
        event MtApi5Client.QuoteHandler QuoteUpdated;

        double AccountInfoDouble(ENUM_ACCOUNT_INFO_DOUBLE propertyId);
        long AccountInfoInteger(ENUM_ACCOUNT_INFO_INTEGER propertyId);
        string AccountInfoString(ENUM_ACCOUNT_INFO_STRING propertyId);
        void Alert(string message);
        int Bars(string symbolName, ENUM_TIMEFRAMES timeframe);
        int Bars(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime);
        int BarsCalculated(int indicatorHandle);
        void BeginConnect(int port);
        void BeginConnect(string host, int port);
        void BeginDisconnect();
        bool Buy(out MqlTradeResult result, double volume, string symbol = null, double price = 0, double sl = 0, double tp = 0, string comment = null);
        bool ChartApplyTemplate(long chartId, string filename);
        bool ChartClose(long chartId = 0);
        long ChartFirst();
        double ChartGetDouble(long chartId, ENUM_CHART_PROPERTY_DOUBLE propId, int subWindow = 0);
        long ChartGetInteger(long chartId, ENUM_CHART_PROPERTY_INTEGER propId, int subWindow = 0);
        string ChartGetString(long chartId, ENUM_CHART_PROPERTY_STRING propId);
        long ChartId();
        long ChartId(int expertHandle);
        bool ChartIndicatorAdd(long chartId, int subWindow, int indicatorHandle);
        bool ChartIndicatorDelete(long chartId, int subWindow, string indicatorShortname);
        int ChartIndicatorGet(long chartId, int subWindow, string indicatorShortname);
        string ChartIndicatorName(long chartId, int subWindow, int index);
        int ChartIndicatorsTotal(long chartId, int subWindow);
        bool ChartNavigate(long chartId, ENUM_CHART_POSITION position, int shift = 0);
        long ChartNext(long chartId);
        long ChartOpen(string symbol, ENUM_TIMEFRAMES period);
        ENUM_TIMEFRAMES ChartPeriod(long chartId);
        double ChartPriceOnDropped();
        void ChartRedraw(long chartId = 0);
        bool ChartSaveTemplate(long chartId, string filename);
        bool ChartScreenShot(long chartId, string filename, int width, int height, ENUM_ALIGN_MODE alignMode = ENUM_ALIGN_MODE.ALIGN_RIGHT);
        bool ChartSetDouble(long chartId, ENUM_CHART_PROPERTY_DOUBLE propId, double value);
        bool ChartSetInteger(long chartId, ENUM_CHART_PROPERTY_INTEGER propId, long value);
        bool ChartSetString(long chartId, ENUM_CHART_PROPERTY_STRING propId, string value);
        bool ChartSetSymbolPeriod(long chartId, string symbol, ENUM_TIMEFRAMES period);
        string ChartSymbol(long chartId);
        DateTime ChartTimeOnDropped();
        bool ChartTimePriceToXY(long chartId, int subWindow, DateTime? time, double price, out int x, out int y);
        int ChartWindowFind(long chartId, string indicatorShortname);
        int ChartWindowOnDropped();
        int ChartXOnDropped();
        bool ChartXYToTimePrice(long chartId, int x, int y, out int subWindow, out DateTime? time, out double price);
        int ChartYOnDropped();
        int CopyBuffer(int indicatorHandle, int bufferNum, DateTime startTime, DateTime stopTime, out double[] buffer);
        int CopyBuffer(int indicatorHandle, int bufferNum, DateTime startTime, int count, out double[] buffer);
        int CopyBuffer(int indicatorHandle, int bufferNum, int startPos, int count, out double[] buffer);
        int CopyClose(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out double[] closeArray);
        int CopyClose(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out double[] closeArray);
        int CopyClose(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out double[] closeArray);
        int CopyHigh(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out double[] highArray);
        int CopyHigh(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out double[] highArray);
        int CopyHigh(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out double[] highArray);
        int CopyLow(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out double[] lowArray);
        int CopyLow(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out double[] lowArray);
        int CopyLow(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out double[] lowArray);
        int CopyOpen(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out double[] openArray);
        int CopyOpen(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out double[] openArray);
        int CopyOpen(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out double[] openArray);
        int CopyRates(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out MqlRates[] ratesArray);
        int CopyRates(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out MqlRates[] ratesArray);
        int CopyRates(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out MqlRates[] ratesArray);
        int CopyRealVolume(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out long[] volumeArray);
        int CopyRealVolume(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out long[] volumeArray);
        int CopyRealVolume(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out long[] volumeArray);
        int CopySpread(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out int[] spreadArray);
        int CopySpread(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out int[] spreadArray);
        int CopySpread(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out int[] spreadArray);
        List<MqlTick> CopyTicks(string symbolName, CopyTicksFlag flags = CopyTicksFlag.All, ulong from = 0, uint count = 0);
        int CopyTickVolume(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out long[] volumeArray);
        int CopyTickVolume(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out long[] volumeArray);
        int CopyTickVolume(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out long[] volumeArray);
        int CopyTime(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, DateTime stopTime, out DateTime[] timeArray);
        int CopyTime(string symbolName, ENUM_TIMEFRAMES timeframe, DateTime startTime, int count, out DateTime[] timeArray);
        int CopyTime(string symbolName, ENUM_TIMEFRAMES timeframe, int startPos, int count, out DateTime[] timeArray);
        int GetLastError();
        IEnumerable<Mt5Quote> GetQuotes();
        bool GlobalVariableCheck(string name);
        bool GlobalVariableDel(string name);
        double GlobalVariableGet(string name);
        string GlobalVariableName(int index);
        int GlobalVariablesDeleteAll(string prefixName = "", DateTime? limitData = null);
        DateTime GlobalVariableSet(string name, double value);
        bool GlobalVariableSetOnCondition(string name, double value, double checkValue);
        void GlobalVariablesFlush();
        int GlobalVariablesTotal();
        bool GlobalVariableTemp(string name);
        DateTime GlobalVariableTime(string name);
        double HistoryDealGetDouble(ulong ticketNumber, ENUM_DEAL_PROPERTY_DOUBLE propertyId);
        long HistoryDealGetInteger(ulong ticketNumber, ENUM_DEAL_PROPERTY_INTEGER propertyId);
        string HistoryDealGetString(ulong ticketNumber, ENUM_DEAL_PROPERTY_STRING propertyId);
        ulong HistoryDealGetTicket(int index);
        bool HistoryDealSelect(ulong ticket);
        int HistoryDealsTotal();
        double HistoryOrderGetDouble(ulong ticketNumber, ENUM_ORDER_PROPERTY_DOUBLE propertyId);
        long HistoryOrderGetInteger(ulong ticketNumber, ENUM_ORDER_PROPERTY_INTEGER propertyId);
        string HistoryOrderGetString(ulong ticketNumber, ENUM_ORDER_PROPERTY_STRING propertyId);
        ulong HistoryOrderGetTicket(int index);
        bool HistoryOrderSelect(ulong ticket);
        int HistoryOrdersTotal();
        bool HistorySelect(DateTime fromDate, DateTime toDate);
        bool HistorySelectByPosition(long positionId);
        int iAC(string symbol, ENUM_TIMEFRAMES period);
        int iAD(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME appliedVolume);
        int iADX(string symbol, ENUM_TIMEFRAMES period, int adxPeriod);
        int iADXWilder(string symbol, ENUM_TIMEFRAMES period, int adxPeriod);
        int iAlligator(string symbol, ENUM_TIMEFRAMES period, int jawPeriod, int jawShift, int teethPeriod, int teethShift, int lipsPeriod, int lipsShift, ENUM_MA_METHOD maMethod, ENUM_APPLIED_PRICE appliedPrice);
        int iAMA(string symbol, ENUM_TIMEFRAMES period, int amaPeriod, int fastMaPeriod, int slowMaPeriod, int amaShift, ENUM_APPLIED_PRICE appliedPrice);
        int iAO(string symbol, ENUM_TIMEFRAMES period);
        int iATR(string symbol, ENUM_TIMEFRAMES period, int maPeriod);
        int iBands(string symbol, ENUM_TIMEFRAMES period, int bandsPeriod, int bandsShift, double deviation, ENUM_APPLIED_PRICE appliedPrice);
        int iBearsPower(string symbol, ENUM_TIMEFRAMES period, int maPeriod);
        int iBullsPower(string symbol, ENUM_TIMEFRAMES period, int maPeriod);
        int iBWMFI(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME appliedVolume);
        int iCCI(string symbol, ENUM_TIMEFRAMES period, int maPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int iChaikin(string symbol, ENUM_TIMEFRAMES period, int fastMaPeriod, int slowMaPeriod, ENUM_MA_METHOD maMethod, ENUM_APPLIED_VOLUME appliedVolume);
        int iCustom(string symbol, ENUM_TIMEFRAMES period, string name, bool[] parameters);
        int iCustom(string symbol, ENUM_TIMEFRAMES period, string name, double[] parameters);
        int iCustom(string symbol, ENUM_TIMEFRAMES period, string name, int[] parameters);
        int iCustom(string symbol, ENUM_TIMEFRAMES period, string name, string[] parameters);
        int iDEMA(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_APPLIED_PRICE appliedPrice);
        int iDeMarker(string symbol, ENUM_TIMEFRAMES period, int maPeriod);
        int iEnvelopes(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_MA_METHOD maMethod, ENUM_APPLIED_PRICE appliedPrice, double deviation);
        int iForce(string symbol, ENUM_TIMEFRAMES period);
        int iForce(string symbol, ENUM_TIMEFRAMES period, int maPeriod, ENUM_MA_METHOD maMethod, ENUM_APPLIED_VOLUME appliedVolume);
        int iFrAMA(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_APPLIED_PRICE appliedPrice);
        int iGator(string symbol, ENUM_TIMEFRAMES period, int jawPeriod, int jawShift, int teethPeriod, int teethShift, int lipsPeriod, int lipsShift, ENUM_MA_METHOD maMethod, ENUM_APPLIED_PRICE appliedPrice);
        int iIchimoku(string symbol, ENUM_TIMEFRAMES period, int tenkanSen, int kijunSen, int senkouSpanB);
        int iMA(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_MA_METHOD maMethod, ENUM_APPLIED_PRICE appliedPrice);
        int iMACD(string symbol, ENUM_TIMEFRAMES period, int fastEmaPeriod, int slowEmaPeriod, int signalPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int iMFI(string symbol, ENUM_TIMEFRAMES period, int maPeriod, ENUM_APPLIED_VOLUME appliedVolume);
        int iMomentum(string symbol, ENUM_TIMEFRAMES period, int momPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int IndicatorCreate(string symbol, ENUM_TIMEFRAMES period, ENUM_INDICATOR indicatorType, List<MqlParam> parameters = null);
        bool IndicatorRelease(int indicatorHandle);
        int iOBV(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME appliedVolume);
        int iOsMA(string symbol, ENUM_TIMEFRAMES period, int fastEmaPeriod, int slowEmaPeriod, int signalPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int iRSI(string symbol, ENUM_TIMEFRAMES period, int maPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int iRVI(string symbol, ENUM_TIMEFRAMES period, int maPeriod);
        int iSAR(string symbol, ENUM_TIMEFRAMES period, double step, double maximum);
        int iStdDev(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_MA_METHOD maMethod, ENUM_APPLIED_PRICE appliedPrice);
        bool IsTesting();
        int iStochastic(string symbol, ENUM_TIMEFRAMES period, int Kperiod, int Dperiod, int slowing, ENUM_MA_METHOD maMethod, ENUM_STO_PRICE priceField);
        int iTEMA(string symbol, ENUM_TIMEFRAMES period, int maPeriod, int maShift, ENUM_APPLIED_PRICE appliedPrice);
        int iTriX(string symbol, ENUM_TIMEFRAMES period, int maPeriod, ENUM_APPLIED_PRICE appliedPrice);
        int iVIDyA(string symbol, ENUM_TIMEFRAMES period, int cmoPeriod, int emaPeriod, int maShift, ENUM_APPLIED_PRICE appliedPrice);
        int iVolumes(string symbol, ENUM_TIMEFRAMES period, ENUM_APPLIED_VOLUME appliedVolume);
        int iWPR(string symbol, ENUM_TIMEFRAMES period, int calcPeriod);
        bool MarketBookAdd(string symbol);
        bool MarketBookGet(string symbol, out MqlBookInfo[] book);
        bool MarketBookRelease(string symbol);
        bool ObjectCreate(long chartId, string name, ENUM_OBJECT type, int nwin, DateTime time, double price, List<Tuple<DateTime, double>> listOfCoordinates = null);
        bool ObjectDelete(long chartId, string name);
        int ObjectFind(long chartId, string name);
        double ObjectGetDouble(long chartId, string name, ENUM_OBJECT_PROPERTY_DOUBLE propId);
        long ObjectGetInteger(long chartId, string name, ENUM_OBJECT_PROPERTY_INTEGER propId);
        string ObjectGetString(long chartId, string name, ENUM_OBJECT_PROPERTY_STRING propId);
        DateTime ObjectGetTimeByValue(long chartId, string name, double value, int lineId);
        double ObjectGetValueByTime(long chartId, string name, DateTime time, int lineId);
        bool ObjectMove(long chartId, string name, int pointIndex, DateTime time, double price);
        string ObjectName(long chartId, int pos, int subWindow = -1, int type = -1);
        int ObjectsDeleteAll(long chartId, int subWindow = -1, int type = -1);
        bool ObjectSetDouble(long chartId, string name, ENUM_OBJECT_PROPERTY_DOUBLE propId, double propValue);
        bool ObjectSetInteger(long chartId, string name, ENUM_OBJECT_PROPERTY_INTEGER propId, long propValue);
        bool ObjectSetString(long chartId, string name, ENUM_OBJECT_PROPERTY_STRING propId, string propValue);
        int ObjectsTotal(long chartId, int subWindow = -1, int type = -1);
        bool OrderCalcMargin(ENUM_ORDER_TYPE action, string symbol, double volume, double price, out double margin);
        bool OrderCalcProfit(ENUM_ORDER_TYPE action, string symbol, double volume, double priceOpen, double priceClose, out double profit);
        bool OrderCheck(MqlTradeRequest request, out MqlTradeCheckResult result);
        bool OrderCloseAll();
        double OrderGetDouble(ENUM_ORDER_PROPERTY_DOUBLE propertyId);
        long OrderGetInteger(ENUM_ORDER_PROPERTY_INTEGER propertyId);
        string OrderGetString(ENUM_ORDER_PROPERTY_STRING propertyId);
        ulong OrderGetTicket(int index);
        bool OrderSelect(ulong ticket);
        bool OrderSend(MqlTradeRequest request, out MqlTradeResult result);
        bool OrderSendAsync(MqlTradeRequest request, out MqlTradeResult result);
        int OrdersTotal();
        bool PositionClose(ulong ticket, ulong deviation = ulong.MaxValue);
        bool PositionClose(ulong ticket, out MqlTradeResult result);
        bool PositionClose(ulong ticket, ulong deviation, out MqlTradeResult result);
        int PositionCloseAll();
        bool PositionClosePartial(string symbol, double volume, ulong deviation = ulong.MaxValue);
        bool PositionClosePartial(ulong ticket, double volume, ulong deviation = ulong.MaxValue);
        double PositionGetDouble(ENUM_POSITION_PROPERTY_DOUBLE propertyId);
        long PositionGetInteger(ENUM_POSITION_PROPERTY_INTEGER propertyId);
        string PositionGetString(ENUM_POSITION_PROPERTY_STRING propertyId);
        string PositionGetSymbol(int index);
        ulong PositionGetTicket(int index);
        bool PositionModify(ulong ticket, double sl, double tp);
        bool PositionOpen(string symbol, ENUM_ORDER_TYPE orderType, double volume, double price, double sl, double tp, string comment = "");
        bool PositionOpen(string symbol, ENUM_ORDER_TYPE orderType, double volume, double price, double sl, double tp, out MqlTradeResult result);
        bool PositionOpen(string symbol, ENUM_ORDER_TYPE orderType, double volume, double price, double sl, double tp, string comment, out MqlTradeResult result);
        bool PositionSelect(string symbol);
        bool PositionSelectByTicket(ulong ticket);
        int PositionsTotal();
        bool Print(string message);
        void ResetLastError();
        bool Sell(out MqlTradeResult result, double volume, string symbol = null, double price = 0, double sl = 0, double tp = 0, string comment = null);
        long SeriesInfoInteger(string symbolName, ENUM_TIMEFRAMES timeframe, ENUM_SERIES_INFO_INTEGER propId);
        double SymbolInfoDouble(string symbolName, ENUM_SYMBOL_INFO_DOUBLE propId);
        long SymbolInfoInteger(string symbolName, ENUM_SYMBOL_INFO_INTEGER propId);
        bool SymbolInfoSessionQuote(string name, ENUM_DAY_OF_WEEK dayOfWeek, uint sessionIndex, out DateTime from, out DateTime to);
        bool SymbolInfoSessionTrade(string name, ENUM_DAY_OF_WEEK dayOfWeek, uint sessionIndex, out DateTime from, out DateTime to);
        string SymbolInfoString(string symbolName, ENUM_SYMBOL_INFO_STRING propId);
        bool SymbolInfoString(string symbolName, ENUM_SYMBOL_INFO_STRING propId, out string value);
        MqlTick SymbolInfoTick(string symbol);
        bool SymbolInfoTick(string symbol, out MqlTick tick);
        bool SymbolIsSynchronized(string symbolName);
        string SymbolName(int pos, bool selected);
        bool SymbolSelect(string symbolName, bool selected);
        int SymbolsTotal(bool selected);
        double TerminalInfoDouble(ENUM_TERMINAL_INFO_DOUBLE propertyId);
        int TerminalInfoInteger(ENUM_TERMINAL_INFO_INTEGER propertyId);
        string TerminalInfoString(ENUM_TERMINAL_INFO_STRING propertyId);
        void TesterStop();
        DateTime TimeCurrent();
        DateTime TimeGMT();
        DateTime TimeLocal();
        DateTime TimeTradeServer();
        void UnlockTicks();
    }
}